#=======================================
# Build settings. Set these.

# Project setup
SET(PROJECT_NAME hemocell)

# HemoCell location relative to CMakelists.txt
SET(HEMOCELL_BASE_DIR "./../..")
SET(PALABOS_DIR "${HEMOCELL_BASE_DIR}/palabos")

# Build settings
SET(ENABLE_MPI 1) # For windows builds set to zero
SET(ENABLE_PARMETIS 0) # Do we enable load_balancing stuff? 
SET(BUILD_TYPE Release)  # Debug or Release


MESSAGE( STATUS "HEMOCELL_DIR:         " ${HEMOCELL_BASE_DIR} )
MESSAGE( STATUS "PALABOS_DIR:         " ${PALABOS_DIR} )

#=======================================
PROJECT(${PROJECT_NAME} CXX C)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(CMAKE_VERBOSE_MAKEFILE 1)
INCLUDE(GNUInstallDirs)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}")

#=======================================
# Set up cmake environment

FIND_PACKAGE(MPI REQUIRED)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})

#===================================
#Pasumo options 
ADD_DEFINITIONS("-DPLB_MPI_PARALLEL")
ADD_DEFINITIONS("-DPLB_USE_POSIX")
ADD_DEFINITIONS("-DPLB_SMP_PARALLEL")
ADD_DEFINITIONS("-DCOMPILING_HEMOCELL_LIBRARY")
IF(APPLE)
    ADD_DEFINITIONS("-DPLB_MAC_OS_X")
ENDIF(APPLE)

#=======================================

OPTION(ENABLE_MPI "Enable MPI" ${DEFAULT})
INCLUDE(FindMPI)
IF(MPI_CXX_FOUND)
  SET(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
ELSE(MPI_CXX_FOUND)
  MESSAGE(FATAL_ERROR "MPI-COMPILER NOT found!")
ENDIF(MPI_CXX_FOUND)

#=======================================

execute_process(COMMAND ${CMAKE_CXX_COMPILER} --version 
                COMMAND head -n1
                COMMAND "cut" "-d " "-f1"
                OUTPUT_VARIABLE CXX_COMPILER_NAME
                OUTPUT_STRIP_TRAILING_WHITESPACE)
MESSAGE(STATUS "COMPILER: ${MPI_CXX_COMPILER}, TYPE: ${CXX_COMPILER_NAME}")

#Set up correct flags for compiler
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -march=native -std=c++11")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb -Wformat -Wformat-security")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=format-security")
IF(${CXX_COMPILER_NAME} STREQUAL "g++")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-empty-body")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-ignored-qualifiers")
ENDIF(${CXX_COMPILER_NAME} STREQUAL "g++")
IF(${CXX_COMPILER_NAME} STREQUAL "icpc")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -wd858")
ENDIF(${CXX_COMPILER_NAME} STREQUAL "icpc")

#===================================
SET(HDF5_PREFER_PARALLEL 1)
SET(HDF5_USE_STATIC_LIBRARIES 1)
FIND_PACKAGE(HDF5 COMPONENTS C HL)
if(NOT ${HDF5_FOUND})
  message(fatal_error "Hdf5 Libraries not found!")
endif(NOT ${HDF5_FOUND})
INCLUDE_DIRECTORIES(AFTER ${HDF5_INCLUDE_DIRS})
message(STATUS "HDF5 Include dir:     ${HDF5_INCLUDE_DIRS}")
#===================================

IF(ENABLE_PARMETIS)
FIND_PATH(PARMETIS_INCLUDE_DIR parmetis.h HINTS
    ${HEMOCELL_BASE_DIR}/external/parmetis-4.0.3/include/)
IF(NOT PARMETIS_INCLUDE_DIR)
  MESSAGE(FATAL_ERROR "Parmetis include path not found!")
ENDIF(NOT PARMETIS_INCLUDE_DIR)
MESSAGE( STATUS "PARMETIS INCLUDE DIR:       " ${PARMETIS_INCLUDE_DIR})
FIND_PATH(METIS_INCLUDE_DIR metis.h HINTS
    ${HEMOCELL_BASE_DIR}/external/parmetis-4.0.3/metis/include/)
IF(NOT METIS_INCLUDE_DIR)
  MESSAGE(FATAL_ERROR "Metis include path not found!")
ENDIF(NOT METIS_INCLUDE_DIR)
MESSAGE( STATUS "METIS INCLUDE DIR:       " ${METIS_INCLUDE_DIR})

INCLUDE_DIRECTORIES(${PARMETIS_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${METIS_INCLUDE_DIR})

FIND_LIBRARY(PARMETIS_LIBRARY libparmetis.a HINTS
    ${HEMOCELL_BASE_DIR}/external/parmetis-4.0.3/build/*/*) 
IF(PARMETIS_LIBRARY STREQUAL "PARMETIS_LIBRARY-NOTFOUND")
  MESSAGE(FATAL_ERROR "Parmetis Library not found, try compiling
  external/parmetis-4.0.3?!")
ENDIF(PARMETIS_LIBRARY STREQUAL "PARMETIS_LIBRARY-NOTFOUND")
MESSAGE( STATUS "PARMETIS LIBRARY DIR:       " ${PARMETIS_LIBRARY})

FIND_LIBRARY(METIS_LIBRARY libmetis.a HINTS
    ${HEMOCELL_BASE_DIR}/external/parmetis-4.0.3/build/*/*) 
IF(METIS_LIBRARY STREQUAL "METIS_LIBRARY-NOTFOUND")
  MESSAGE(FATAL_ERROR "Metis Library not found,try compiling
  external/parmetis-4.0.3? ")
ENDIF(METIS_LIBRARY STREQUAL "METIS_LIBRARY-NOTFOUND")
MESSAGE( STATUS "METIS LIBRARY DIR:       " ${METIS_LIBRARY})

ADD_DEFINITIONS("-DHEMO_PARMETIS")
ENDIF(ENABLE_PARMETIS)

FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/config/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC}) 
FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/core/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC}) 
FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/external/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC}) 
FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/helper/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC}) 
FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/IO/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC}) 
FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/mechanics/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC}) 
FILE(GLOB_RECURSE SRC_FILES_SRC "${CMAKE_SOURCE_DIR}/${PALABOS_DIR}/src/*.cpp")
SET(SRC_FILES ${SRC_FILES} ${SRC_FILES_SRC})

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/config)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/core)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/external)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/helper)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/IO)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/mechanics)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/external/tinyxml2/)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/palabos/src)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${HEMOCELL_BASE_DIR}/palabos/externalLibraries)

#INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${PALABOS_DIR}/externalLibraries)
LIST(APPEND SRC_FILES ${CMAKE_SOURCE_DIR}/${PALABOS_DIR}/externalLibraries/tinyxml/tinyxml.cpp)
LIST(APPEND SRC_FILES ${CMAKE_SOURCE_DIR}/${PALABOS_DIR}/externalLibraries/tinyxml/tinyxmlerror.cpp)
LIST(APPEND SRC_FILES ${CMAKE_SOURCE_DIR}/${PALABOS_DIR}/externalLibraries/tinyxml/tinyxmlparser.cpp)

ADD_library("${PROJECT_NAME}_pre_all_deps" STATIC ${SRC_FILES})

add_custom_target(hemocell_pre_finalize ALL 
  COMMAND touch lib${PROJECT_NAME}.a
  COMMAND rm lib${PROJECT_NAME}.a)

IF(ENABLE_PARMETIS)
  add_custom_target(hemocell_with_parmetis ALL 
    COMMAND ${CMAKE_AR} crsT lib${PROJECT_NAME}.a
    $<TARGET_FILE:${PROJECT_NAME}_pre_all_deps> ${PARMETIS_LIBRARY}
    ${METIS_LIBRARY}
    DEPENDS hemocell_pre_finalize)
ELSE(ENABLE_PARMETIS)
  add_custom_target(hemocell_with_parmetis ALL)
ENDIF(ENABLE_PARMETIS)
    
#might work someday, not now, must be linked in the case
#add_custom_target(hemocell_with_hdf5 ALL 
#  COMMAND ${CMAKE_AR} crsT lib${PROJECT_NAME}.a
#  $<TARGET_FILE:${PROJECT_NAME}_pre_all_deps> ${HDF5_LIBRARIES})

#finalize library
add_custom_target(hemocell_finalize ALL 
  COMMAND ${CMAKE_AR} crsT lib${PROJECT_NAME}.a
  $<TARGET_FILE:${PROJECT_NAME}_pre_all_deps>
  DEPENDS hemocell_pre_finalize hemocell_with_parmetis)
